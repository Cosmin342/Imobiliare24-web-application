/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationAddDTO,
  NotificationDTO,
  NotificationDTOPagedResponseRequestResponse,
  NotificationDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    NotificationAddDTOFromJSON,
    NotificationAddDTOToJSON,
    NotificationDTOFromJSON,
    NotificationDTOToJSON,
    NotificationDTOPagedResponseRequestResponseFromJSON,
    NotificationDTOPagedResponseRequestResponseToJSON,
    NotificationDTORequestResponseFromJSON,
    NotificationDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiNotificationAddAnnouncementIdPostRequest {
    announcementId: string;
    notificationAddDTO?: NotificationAddDTO;
}

export interface ApiNotificationDeleteIdDeleteRequest {
    id: string;
}

export interface ApiNotificationGetByIdIdGetRequest {
    id: string;
}

export interface ApiNotificationGetPageForCurrentUserGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiNotificationUpdatePutRequest {
    notificationDTO?: NotificationDTO;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     */
    async apiNotificationAddAnnouncementIdPostRaw(requestParameters: ApiNotificationAddAnnouncementIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.announcementId === null || requestParameters.announcementId === undefined) {
            throw new runtime.RequiredError('announcementId','Required parameter requestParameters.announcementId was null or undefined when calling apiNotificationAddAnnouncementIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notification/Add/{announcementId}`.replace(`{${"announcementId"}}`, encodeURIComponent(String(requestParameters.announcementId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationAddDTOToJSON(requestParameters.notificationAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationAddAnnouncementIdPost(requestParameters: ApiNotificationAddAnnouncementIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiNotificationAddAnnouncementIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNotificationDeleteIdDeleteRaw(requestParameters: ApiNotificationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiNotificationDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notification/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationDeleteIdDelete(requestParameters: ApiNotificationDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiNotificationDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNotificationGetByIdIdGetRaw(requestParameters: ApiNotificationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiNotificationGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notification/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationGetByIdIdGet(requestParameters: ApiNotificationGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationDTORequestResponse> {
        const response = await this.apiNotificationGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNotificationGetPageForCurrentUserGetRaw(requestParameters: ApiNotificationGetPageForCurrentUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notification/GetPageForCurrentUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationGetPageForCurrentUserGet(requestParameters: ApiNotificationGetPageForCurrentUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationDTOPagedResponseRequestResponse> {
        const response = await this.apiNotificationGetPageForCurrentUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNotificationUpdatePutRaw(requestParameters: ApiNotificationUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notification/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationDTOToJSON(requestParameters.notificationDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationUpdatePut(requestParameters: ApiNotificationUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiNotificationUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
